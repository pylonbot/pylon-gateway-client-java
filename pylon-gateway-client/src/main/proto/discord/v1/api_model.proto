syntax = "proto3";

package pylon.rpc.discord.v1.api;
option java_multiple_files = true;
option go_package = "up.lol/pylon/rpc/go/rpc/discord/v1/api";

import "discord/v1/model.proto";
import "google/protobuf/wrappers.proto";

message ApiError {
  uint32 status = 1;
  uint32 code = 2;
  string message = 3;
}

message SnowflakeValue { fixed64 value = 1 [jstype = JS_STRING]; }
message SnowflakeListValue { repeated fixed64 values = 1 [jstype = JS_STRING]; }

message PermissionsValue { uint64 value = 1 [jstype = JS_STRING]; }

// Modify Guild

message ModifyGuildRequest {
  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue region = 2;
  google.protobuf.UInt32Value verification_level = 3;
  google.protobuf.UInt32Value default_message_notifications = 4;
  google.protobuf.UInt32Value explicit_content_filter = 5;
  SnowflakeValue afk_channel_id = 6;
  google.protobuf.UInt32Value afk_timeout = 7;
  google.protobuf.StringValue icon = 8;
  SnowflakeValue owner_id = 9;
  google.protobuf.StringValue splash = 10;
  google.protobuf.StringValue banner = 11;
  SnowflakeValue system_channel_id = 12;
  SnowflakeValue rules_channel_id = 13;
  SnowflakeValue public_updates_channel_id = 14;
  SnowflakeValue preferred_locale = 15;
  google.protobuf.StringValue audit_log_reason = 16;
}

message ModifyGuildResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.GuildData response = 2;
}

// Create Guild Channel

message CreateGuildChannelRequest {
  string name = 1;
  pylon.rpc.discord.v1.model.ChannelData.ChannelType type = 2;
  google.protobuf.StringValue topic = 3;
  google.protobuf.UInt32Value bitrate = 4;
  google.protobuf.UInt32Value user_limit = 5;
  google.protobuf.UInt32Value rate_limit_per_user = 6;
  google.protobuf.UInt32Value position = 7;
  repeated pylon.rpc.discord.v1.model.ChannelData
      .ChannelPermissionOverwriteData permission_overwrites = 8;
  SnowflakeValue parent_id = 9;
  google.protobuf.BoolValue nsfw = 10;
  google.protobuf.StringValue audit_log_reason = 11;
}

message CreateGuildChannelResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.ChannelData response = 2;
}

// Modify Guild Channel Positions

message ModifyGuildChannelPositionsRequest {
  repeated ChannelPosition channel_positions = 1;

  message ChannelPosition {
    fixed64 id = 1 [jstype = JS_STRING];
    uint32 position = 2;
  }
}

message ModifyGuildChannelPositionsResponse { ApiError error = 1; }

// Add Guild Member

message AddGuildMemberRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  string access_token = 2;
  google.protobuf.StringValue nick = 3;
  SnowflakeListValue roles = 4;
  google.protobuf.BoolValue mute = 5;
  google.protobuf.BoolValue deaf = 6;
}

message AddGuildMemberResponse {
  ApiError error = 1;
  bool added = 2;
}

// Modify Guild Member

message ModifyGuildMemberRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  google.protobuf.StringValue nick = 2;
  SnowflakeListValue roles = 3;
  google.protobuf.BoolValue mute = 4;
  google.protobuf.BoolValue deaf = 5;
  SnowflakeValue channel_id = 6;
  google.protobuf.StringValue audit_log_reason = 7;
}

message ModifyGuildMemberResponse { ApiError error = 1; }

// Modify Current User Nick

message ModifyCurrentUserNickRequest { google.protobuf.StringValue nick = 1; }

message ModifyCurrentUserNickResponse { ApiError error = 1; }

// Add Guild Member Role

message AddGuildMemberRoleRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  fixed64 role_id = 2 [jstype = JS_STRING];
  google.protobuf.StringValue audit_log_reason = 3;
}

message AddGuildMemberRoleResponse { ApiError error = 1; }

// Remove Guild Member Role

message RemoveGuildMemberRoleRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  fixed64 role_id = 2 [jstype = JS_STRING];
  google.protobuf.StringValue audit_log_reason = 3;
}

message RemoveGuildMemberRoleResponse { ApiError error = 1; }

// Remove Guild Member

message RemoveGuildMemberRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  google.protobuf.StringValue audit_log_reason = 2;
}

message RemoveGuildMemberResponse { ApiError error = 1; }

// Get Guild Bans

message GetGuildBansRequest { fixed64 user_id = 1 [jstype = JS_STRING]; }

message GetGuildBansResponse {
  ApiError error = 1;
  repeated pylon.rpc.discord.v1.model.GuildBan bans = 2;
}

// Get Guild Ban

message GetGuildBanRequest { fixed64 user_id = 1 [jstype = JS_STRING]; }

message GetGuildBanResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.GuildBan ban = 2;
}

// Create Guild Ban

message CreateGuildBanRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  google.protobuf.UInt32Value delete_message_days = 2;
  google.protobuf.StringValue audit_log_reason = 3;
}

message CreateGuildBanResponse { ApiError error = 1; }

// Remove Guild Ban

message RemoveGuildBanRequest {
  fixed64 user_id = 1 [jstype = JS_STRING];
  google.protobuf.StringValue audit_log_reason = 3;
}

message RemoveGuildBanResponse { ApiError error = 1; }

// Create Guild Role

message CreateGuildRoleRequest {
  google.protobuf.StringValue name = 1;
  PermissionsValue permissions = 2;
  google.protobuf.UInt32Value color = 3;
  google.protobuf.BoolValue hoist = 4;
  google.protobuf.BoolValue mentionable = 5;
}

message CreateGuildRoleResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.RoleData role = 2;
}

// Modify Guild Role Positions

message ModifyGuildRolePositionsRequest {
  repeated RolePosition role_positions = 1;

  message RolePosition {
    fixed64 id = 1 [jstype = JS_STRING];
    uint32 position = 2;
  }
}

message ModifyGuildRolePositionsResponse {
  ApiError error = 1;
  repeated pylon.rpc.discord.v1.model.RoleData roles = 2;
}

// Modify Guild Role

message ModifyGuildRoleRequest {
  fixed64 role_id = 1 [jstype = JS_STRING];
  google.protobuf.StringValue name = 2;
  PermissionsValue permissions = 3;
  google.protobuf.UInt32Value color = 4;
  google.protobuf.BoolValue hoist = 5;
  google.protobuf.BoolValue mentionable = 6;
}

message ModifyGuildRoleResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.RoleData role = 2;
}

// Delete Guild Role

message DeleteGuildRoleRequest { fixed64 role_id = 1 [jstype = JS_STRING]; }

message DeleteGuildRoleResponse { ApiError error = 1; }

// Get Guild Prune Count

message GetGuildPruneCountRequest {
  google.protobuf.UInt32Value days = 1;
  SnowflakeListValue include_roles = 2;
}

message GetGuildPruneCountResponse { ApiError error = 1; }

// Begin Guild Prune

message BeginGuildPruneRequest {
  google.protobuf.UInt32Value days = 1;
  SnowflakeListValue include_roles = 2;
  google.protobuf.BoolValue compute_prune_count = 3;
}

message BeginGuildPruneResponse { ApiError error = 1; }

// Get Guild Voice Regions

message GetGuildVoiceRegionsRequest {}

message GetGuildVoiceRegionsResponse {
  ApiError error = 1;
  repeated string regions = 2;
}

// Get Guild Invites

message GetGuildInvitesRequest {}

message GetGuildInvitesResponse {
  ApiError error = 1;
  repeated pylon.rpc.discord.v1.model.InviteData invites = 2;
}

// Modify Channel

message ModifyChannelRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  google.protobuf.StringValue name = 2;
  pylon.rpc.discord.v1.model.ChannelData.ChannelType type = 3;
  google.protobuf.UInt32Value position = 4;
  google.protobuf.StringValue topic = 5;
  google.protobuf.BoolValue nsfw = 6;
  google.protobuf.UInt32Value rate_limit_per_user = 7;
  google.protobuf.UInt32Value bitrate = 8;
  google.protobuf.UInt32Value user_limit = 9;
  ChannelPermissionOverwritesValue permission_overwrites = 10;
  SnowflakeValue parent_id = 11;

  message ChannelPermissionOverwritesValue {
    repeated pylon.rpc.discord.v1.model.ChannelData
        .ChannelPermissionOverwriteData values = 1;
  }
}

message ModifyChannelResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.ChannelData channel = 2;
}

// Delete Channel

message DeleteChannelRequest { fixed64 channel_id = 1 [jstype = JS_STRING]; }

message DeleteChannelResponse { ApiError error = 1; }

// Create Message

message CreateMessageRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  string content = 2;
  google.protobuf.StringValue nonce = 3;
  google.protobuf.BoolValue tts = 4;
  pylon.rpc.discord.v1.model.MessageData.MessageEmbedData embed = 5;
  AllowedMentions allowed_mentions = 6;
  Attachment attachment = 7;

  message AllowedMentions {
    AllowedMentionTypes parse = 1;
    SnowflakeListValue roles = 2;
    SnowflakeListValue users = 3;

    message AllowedMentionTypes {
      bool roles = 1;
      bool users = 2;
      bool everyone = 3;
    }
  }

  message Attachment {
    string name = 1;
    bytes content = 2;
  }
}

message CreateMessageResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.MessageData message = 2;
}

// Crosspost Message

message CrosspostMessageRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
}

message CrosspostMessageResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.MessageData message = 2;
}

// Create Reaction

message CreateReactionRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
  string emoji = 3;
}

message CreateReactionResponse { ApiError error = 1; }

// Delete Own Reaction

message DeleteOwnReactionRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
  string emoji = 3;
}

message DeleteOwnReactionResponse { ApiError error = 1; }

// Delete User Reaction

message DeleteUserReactionRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
  string emoji = 3;
  fixed64 user_id = 4 [jstype = JS_STRING];
}

message DeleteUserReactionResponse { ApiError error = 1; }

// Delete User Reaction

message DeleteAllReactionsRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
}

message DeleteAllReactionsResponse { ApiError error = 1; }

// Delete All Reactions for Emoji

message DeleteAllReactionsForEmojiRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
  string emoji = 3;
}

message DeleteAllReactionsForEmojiResponse { ApiError error = 1; }

// Edit Message

message EditMessageRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
  google.protobuf.StringValue content = 3;
  pylon.rpc.discord.v1.model.MessageData.MessageEmbedData embed = 4;
  google.protobuf.UInt32Value flags = 5;
}

message EditMessageResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.MessageData message = 2;
}

// Delete Message

message DeleteMessageRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
}

message DeleteMessageResponse { ApiError error = 1; }

// Bulk Delete Messages

message BulkDeleteMessagesRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  repeated fixed64 message_ids = 2 [jstype = JS_STRING];
}

message BulkDeleteMessagesResponse { ApiError error = 1; }

// Edit Channel Permissions

message EditChannelPermissionsRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 overwrite_id = 2 [jstype = JS_STRING];
  uint64 allow = 3 [jstype = JS_STRING];
  uint64 deny = 4 [jstype = JS_STRING];
  uint32 type = 5; // todo: common enum
}

message EditChannelPermissionsResponse { ApiError error = 1; }

// Get Channel Invites

message GetChannelInvitesRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
}

message GetChannelInvitesResponse {
  ApiError error = 1;
  repeated pylon.rpc.discord.v1.model.InviteData invites = 2;
}

// Create Channel Invite

message CreateChannelInviteRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  google.protobuf.UInt32Value max_age = 2;
  google.protobuf.UInt32Value max_uses = 3;
  google.protobuf.BoolValue temporary = 4;
  google.protobuf.BoolValue unique = 5;
  SnowflakeValue target_user = 6;
  google.protobuf.UInt32Value target_user_type = 7; // todo: enum
}

message CreateChannelInviteResponse {
  ApiError error = 1;
  pylon.rpc.discord.v1.model.InviteData invite = 2;
}

// Delete Channel Permission

message DeleteChannelPermissionRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 overwrite_id = 2 [jstype = JS_STRING];
}

message DeleteChannelPermissionResponse { ApiError error = 1; }

// Follow News Channel

message FollowNewsChannelRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 webhook_channel_id = 2 [jstype = JS_STRING];
}

message FollowNewsChannelResponse {
  ApiError error = 1;
  fixed64 channel_id = 2 [jstype = JS_STRING];
  fixed64 webhook_id = 3 [jstype = JS_STRING];
}

// Trigger Typing Indicator

message TriggerTypingIndicatorRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
}

message TriggerTypingIndicatorResponse { ApiError error = 1; }

// Get Pinned Messages

message GetPinnedMessagesRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
}

message GetPinnedMessagesResponse {
  ApiError error = 1;
  repeated pylon.rpc.discord.v1.model.MessageData messages = 2;
}

// Add Pinned Channel Message

message AddPinnedChannelMessageRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
}

message AddPinnedChannelMessageResponse { ApiError error = 1; }

// Delete Pinned Channel Message

message DeletePinnedChannelMessageRequest {
  fixed64 channel_id = 1 [jstype = JS_STRING];
  fixed64 message_id = 2 [jstype = JS_STRING];
}

message DeletePinnedChannelMessageResponse { ApiError error = 1; }